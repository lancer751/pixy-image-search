---
import Welcome from '../components/Welcome.astro';
import Layout from '../layouts/Layout.astro';

---

<Layout title={'Welcome to Pixy Gallery'}>
	<div class="text-center space-y-5">
		<h1 class="text-3xl md:text-5xl font-extrabold">Bienvenido a <strong class="text-emerald-400">Pixi Gallery</strong></h1>
		<p class="text-lg text-gray-500">Encuentra la imagen que deseas con la api de <strong class="text-black">PIXABAY</strong></p>
	</div>
	<div class="mt-5 w-full">
		<input id="search-bar" type="text" class="w-full max-w-md mx-auto block bg-white shadow-sm px-4 py-2 rounded-md placeholder:text-gray-300 focus:outline-emerald-500" placeholder="Busca lo que quieras, ejm: auto, árbol, etc.">
		<div class="filters-container hidden">
			<div class="flex flex-col gap-1.5">
				<label for="orientation">Orientación</label>
				<select name="orientation" id="orientation" class="select-filter">
					<option value="all" selected>Todos</option>
					<option value="horizontal">Horizontal</option>
					<option value="vertical">Vertical</option>
				</select>
			</div>
			<div class="flex flex-col gap-1.5">
				<label for="type">Tipo de imagen</label>
				<select name="type" id="type_image" class="select-filter">
					<option value="all" selected>Todos</option>
					<option value="photo">Foto</option>
					<option value="illustration">Ilustración</option>
					<option value="vector">Vector</option>
				</select>
			</div>
			<div class="flex flex-col gap-1.5">
				<label for="order">Ordenar por</label>
				<select name="order" id="type_image" class="select-filter">
					<option value="popular" selected>Popular</option>
					<option value="latest">Más reciente</option>
				</select>
			</div>
		</div>
	</div>
	<section id="gallery">
		<div class="image-massonry-container" id="gallery-container"></div>
		<div id="sentinel" class="w-full h-20 flex items-center justify-center">
			<div class="loading-spinner hidden"></div>
		</div>
		<div id="end-message" class="hidden text-center text-emerald-500 text-lg mt-6 py-5">
			<p>Has llegado al final de lo resultados.</p>
		</div>
	</section>
	<script is:inline type="module">
		const gallery = document.querySelector('#gallery')
		const filtersContainer = document.querySelector('.filters-container')
		const galleryResults = document.querySelector('#gallery-container');
		const searchBar = document.querySelector('#search-bar')
		const sentinel = document.querySelector('#sentinel')
		const endMessage = document.querySelector('#end-message')

		const API_KEY = '49341407-22f2ff3fa6c1821acd85231ef'
		const API_URL = 'https://pixabay.com/api/';
		const perPage = 40;
		let isLoading = false;
		let currentPage = 1;
		const imageFilters = {
			textSearch: '',
			type: 'all',
			orientation: 'all',
			order: 'popular'
		}

		// debounce and throtle
		function debounce(func, timeout = 500) {
			let timer;
			return (...args) => {
				clearTimeout(timer);
				timer = setTimeout(() => { func.apply(this, args); }, timeout);
			};
		}

		function throttle(func, limit = 500) {
			let lastFunc;
			let lastRan;
			return function() {
				const context = this;
				const args = arguments;
				if (!lastRan) {
					func.apply(context, args);
					lastRan = Date.now();
				} else {
					clearTimeout(lastFunc);
					lastFunc = setTimeout(function() {
						if ((Date.now() - lastRan) >= limit) {
							func.apply(context, args);
							lastRan = Date.now();
						}
					}, limit - (Date.now() - lastRan));
				}
			}
		}

		// dom events
		filtersContainer.addEventListener('change' , e => {
			if(e.target.tagName === 'SELECT'){
				const filterValue = e.target.value
				const filterName = e.target.name
				imageFilters[filterName] = filterValue
				getSetImages(imageFilters.textSearch, true)
			}
		})

		searchBar.addEventListener('input', debounce(e => searchResults(e)))

		// setup intersection Observer

		const intersectionOptions = {
			rootMargin: '200px',
		}

		const intersectImagesOptions = {
			rootMargin: '40px',
			threshold: 0.5
		}
		
		function onIntersectingSentinel([entry]){
			if(entry.isIntersecting && imageFilters.textSearch !== ''){
				currentPage++;
				getSetImages(imageFilters.textSearch);
			}
		}

		function onIntersectingImages(entries, self){
			entries.forEach(entry => {
				entry.target.src = entry.target.getAttribute('data-src');
				self.unobserve(entry.target)
			})
		}

		const loadMoreObserver = new IntersectionObserver(throttle(onIntersectingSentinel), intersectionOptions)
		loadMoreObserver.observe(sentinel)
		const lazyImagesObverser = new IntersectionObserver(onIntersectingImages, intersectImagesOptions)

		// get data from apis

		async function getSetImages(textSearch = '', changedFilter = false){
			if(isLoading) return
			isLoading = true
			sentinel.querySelector('.loading-spinner').classList.remove('hidden')
			endMessage.classList.add('hidden')
			loadMoreObserver.observe(sentinel)
			try{
				if(changedFilter){
					currentPage = 1;
					galleryResults.innerHTML = "";
				}
				const response = await fetch(`${API_URL}?key=${API_KEY}&q=${textSearch}&orientation=${imageFilters.orientation}&image_type=${imageFilters.type}&order=${imageFilters.order}&per_page=${perPage}&page=${currentPage}&lang=es`)
				const data = await response.json()
				console.log(`tamaño resultados ${data.hits.length}`)
				if(data.hits.length === 0 && currentPage === 1){
					renderMessage("No hay resultados disponibles");
					return
				}

				if(data.hits.length === 0 && currentPage >= 1){
					endMessage.classList.remove('hidden')
					loadMoreObserver.unobserve(sentinel)
					return
				}
				renderImages(data.hits , !changedFilter)
			}catch(error){
				console.log(error)
				renderMessage("Error al cargar las imágenes")
			}finally{
				isLoading = false
				sentinel.querySelector('.loading-spinner').classList.add('hidden')
			}
		}

		// dinamic functions 
		function searchResults(e){
			let inputWord = e.target.value.trim();
			if(inputWord.includes(" ") && inputWord.length > 0){
				inputWord = inputWord.replace(" ", "+")
			}

			if(inputWord.length >= 0 && inputWord.length < 3){
				if(document.getElementById("message")) return
				filtersContainer.classList.add('hidden')
				endMessage.classList.add('hidden')
				
				let message = "Escribe más de 2 letras para realizar una búsqueda"
				imageFilters.textSearch = '';
				imageFilters.orientation = 'all';
				imageFilters.type = 'all';
				imageFilters.order = 'all';
				renderMessage(message)
				return
			}

			imageFilters.textSearch = inputWord
			document.getElementById("message")?.remove()
			getSetImages(imageFilters.textSearch, true)
		}

		function renderImages(images, loadMoreItems = true){
			if(!loadMoreItems) galleryResults.innerHTML = ""
			
			const fragment = document.createDocumentFragment();

			filtersContainer.classList.remove('hidden')
	
			images.forEach(image => {
				const imageBox = document.createElement('A');
				imageBox.classList.add('image-box', 'group')
				imageBox.setAttribute("data-id", image.id);
				imageBox.href = image.pageURL
				imageBox.target = '_blank'
				const img = document.createElement('IMG')
				img.setAttribute("src", image.previewURL);
				img.alt = `${image.tags || 'Imagen'} - ${image.user}`;
				img.decoding = "async";
				img.loading = "lazy";
				img.setAttribute("data-src", image.webformatURL);

				const overlay = document.createElement('DIV');
				overlay.classList.add('overlay')
				const info = document.createElement('DIV');
				info.innerHTML = `
				<p class="text-white text-sm font-medium">${image.user}</p>
				<div class="flex items-center gap-2 mt-2">
					<span class="text-white text-sm">${image.likes} ♥</span>
					<span class="text-white text-sm">${image.downloads} ↓</span>
				</div>
				`;

				overlay.appendChild(info)
				imageBox?.append(img, overlay)
				fragment?.appendChild(imageBox)
				lazyImagesObverser.observe(img)
			});

			galleryResults.appendChild(fragment)
		}

		function renderMessage(content){
			filtersContainer.classList.add('hidden')
			galleryResults.innerHTML = "";
			const message = document.createElement('P');
			message.id = "message"
			message.textContent = content
			message.classList.add('text-center', 'text-emerald-600')
			gallery.insertBefore(message, sentinel)
		}
		
		getSetImages()
	</script>
</Layout>

<style>
	.loading-spinner {
		border: 4px solid #f3f3f3;
		border-top: 4px solid #10b981;
		border-radius: 50%;
		width: 40px;
		height: 40px;
		animation: spin 1s linear infinite;
		margin: 2rem auto;
	}

	@keyframes spin {
		0% { transform: rotate(0deg); }
		100% { transform: rotate(360deg); }
	}

	.end-message {
		padding: 2rem;
		text-align: center;
		font-size: 1.2rem;
		color: #6b7280;
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 0.5rem;
	}
</style>